buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        kotlinVersion = '1.3.10'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.message.shooter'
    version = '0.0.0-SNAPSHOT'
    sourceCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        implementation(
                "com.fasterxml.jackson.module:jackson-module-kotlin",
                "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
                "org.jetbrains.kotlin:kotlin-reflect",
                "org.springframework.boot:spring-boot-starter",
                "org.springframework.boot:spring-boot-starter-web",
                "org.springframework.boot:spring-boot-starter-mail",
                "io.reactivex.rxjava2:rxjava:2.2.6",
                'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0',
        )

        testImplementation(
                'org.springframework.boot:spring-boot-starter-test',
                'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
        )
    }

    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }

        sourceSets*.kotlin.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }
    }
}

